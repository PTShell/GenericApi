// https://github.com/gradle/gradle/issues
apply plugin: "maven-publish"
apply plugin: "signing"

// load properties
Properties properties = new Properties()
File localPropertiesFile = new File(rootDir, "sonatype.properties")
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("project.properties")
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// =========================================
// = 本地 sonatype properties 文件防止意外上传 =
// =========================================

localPropertiesFile = new File(rootDir, "../../File/sonatype.properties")
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}

// =======
// = 结束 =
// =======

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectPackaging = properties.getProperty("project.packaging")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def signingKeyId = properties.getProperty("signing.keyId")
def signingPassword = properties.getProperty("signing.password")
def signingSecretKeyRingFile = properties.getProperty("signing.secretKeyRingFile")
def ossrhUsername = properties.getProperty("ossrhUsername")
def ossrhPassword = properties.getProperty("ossrhPassword")

def javadocName = properties.getProperty("javadoc.name")

// 适配 macOS 非使用绝对路径
if (!new File(signingSecretKeyRingFile).exists()) {
    signingSecretKeyRingFile = new File(
            rootDir, signingSecretKeyRingFile
    ).getAbsolutePath()
}

ext["signing.keyId"] = signingKeyId
ext["signing.password"] = signingPassword
ext["signing.secretKeyRingFile"] = signingSecretKeyRingFile
ext["ossrhUsername"] = ossrhUsername
ext["ossrhPassword"] = ossrhPassword

// This generates sources.jar
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
//    classpath += configurations.compile
//    // Gradle 8.0.2 之前
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // 升级 Gradle 8.2.1 后 android.getBootClasspath() 异常
    // https://stackoverflow.com/questions/77436558/android-custom-javadoc-task-throws-path-may-not-be-null-or-empty-string
    classpath += files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    classpath += files("${android.sdkDirectory}/build-tools/${android.buildToolsVersion}/core-lambda-stubs.jar")
    failOnError false
}

// This generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet "UTF-8"
        author true
        version projectVersionName
        links "http://docs.oracle.com/javase/7/docs/api"
        title javadocName
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
publishing {
    publications {
        release(MavenPublication) {
            groupId projectGroupId
            artifactId projectArtifactId
            version projectVersionName

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact javadocJar
            artifact sourcesJar

            // https://docs.gradle.org/6.7.1/dsl/org.gradle.api.publish.maven.MavenPom.html
            pom {
                name = projectName
                url = projectSiteUrl
                packaging = projectPackaging
                groupId = projectGroupId
                artifactId = projectArtifactId
                version = projectVersionName
                description = "${projectName}:${projectVersionName} publish"
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                    }
                }
                scm {
                    connection = projectGitUrl
                    developerConnection = projectGitUrl
                    url = projectSiteUrl
                }
                withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", it.group)
                        dependencyNode.appendNode("artifactId", it.name)
                        dependencyNode.appendNode("version", it.version)
                    }
                }
            }
        }
    }
    // https://docs.gradle.org/current/userguide/publishing_maven.html
    repositories {
        maven {
            name = projectName
            // https://s01.oss.sonatype.org/#view-repositories
            // https://central.sonatype.org/publish/publish-guide/#deployment
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}

//module gradle
//
//tasks-build-assemble
//
//publishing-publishReleasePublicationToXXXXXRepository